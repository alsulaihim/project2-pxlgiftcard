# Multi-stage build for production optimization
FROM node:18-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S chatserver -u 1001

# Set working directory
WORKDIR /app

# Copy built application
COPY --from=builder --chown=chatserver:nodejs /app/dist ./dist
COPY --from=builder --chown=chatserver:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=chatserver:nodejs /app/package*.json ./

# Create logs directory
RUN mkdir -p logs && chown chatserver:nodejs logs

# Switch to non-root user
USER chatserver

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => { \
    process.exit(res.statusCode === 200 ? 0 : 1) \
  }).on('error', () => process.exit(1))"

# Start server with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/server.js"]

