rules_version = '2';

// Firebase Storage Security Rules for Giftcard + PXL Platform
service firebase.storage {
  match /b/{bucket}/o {
    
    // Profile Pictures - Users can upload/read their own profile pictures
    match /profile-pictures/{userId}/{allPaths=**} {
      // Allow authenticated users to upload their own profile pictures
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && resource == null // Only allow new uploads, not overwrites for now
        && request.resource.size < 5 * 1024 * 1024 // Max 5MB
        && request.resource.contentType.matches('image/.*'); // Only images
      
      // Allow public read access to profile pictures (for displaying in UI)
      allow read: if true;
      
      // Allow users to delete their own profile pictures
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Chat Media - Allow authenticated users to upload/read chat media
    match /chat-media/{conversationId}/{allPaths=**} {
      // Allow authenticated users to upload media to conversations
      // Simplified rules for development - just require authentication
      allow write: if request.auth != null;
      
      // Allow authenticated users to read chat media
      allow read: if request.auth != null;
      
      // Allow authenticated users to delete their own uploads
      allow delete: if request.auth != null;
    }
    
    // Voice Messages - Store voice recordings
    match /voice-messages/{conversationId}/{allPaths=**} {
      // Allow authenticated users to upload voice messages
      // Simplified for development
      allow write: if request.auth != null;
      
      // Allow authenticated users to read voice messages
      allow read: if request.auth != null;
      
      // Allow deletion by authenticated users
      allow delete: if request.auth != null;
    }
    
    // BUG FIX: 2025-01-30 - Add rules for group chat images
    // Problem: Firebase Storage denying access to group-images/ path
    // Solution: Add specific rules for group chat image uploads
    // Impact: Users can now upload and view group chat images
    match /group-images/{allPaths=**} {
      // Allow authenticated users to upload group images
      allow write: if request.auth != null
        && request.resource.size < 5 * 1024 * 1024 // Max 5MB
        && request.resource.contentType.matches('image/.*'); // Only images
      
      // Allow public read access to group images (for displaying in chat)
      allow read: if true;
      
      // Allow authenticated users to delete group images
      allow delete: if request.auth != null;
    }
    
    // Product Artwork - Simplified for development (TODO: Add proper admin check in production)
    match /products/{productId}/{allPaths=**} {
      // Allow authenticated users to upload product artwork
      // In production, should check for admin role
      allow write: if request.auth != null
        && request.resource.size < 10 * 1024 * 1024 // Max 10MB
        && request.resource.contentType.matches('image/.*'); // Only images
      
      // Allow public read access for marketplace display
      allow read: if true;
      
      // Allow authenticated users to delete
      allow delete: if request.auth != null;
    }
    
    // Artwork Repository - Centralized artwork storage
    match /artwork-repository/{allPaths=**} {
      // Allow authenticated users to upload artwork to repository
      // In production, should check for admin role
      allow write: if request.auth != null
        && request.resource.size < 10 * 1024 * 1024 // Max 10MB
        && request.resource.contentType.matches('image/.*'); // Only images
      
      // Allow public read access for gallery and product display
      allow read: if true;
      
      // Allow authenticated users to delete
      allow delete: if request.auth != null;
    }
    
    // Generated Artwork - For auto-generated product artwork
    match /artwork/{allPaths=**} {
      // Allow authenticated users to upload generated artwork
      // In production, should check for admin role
      allow write: if request.auth != null;
      
      // Allow public read access for marketplace display
      allow read: if true;
      
      // Allow authenticated users to delete
      allow delete: if request.auth != null;
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
